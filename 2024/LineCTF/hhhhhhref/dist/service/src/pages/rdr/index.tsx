import { type GetServerSideProps } from 'next';
import { getServerSession } from 'next-auth';
import Head from 'next/head';
import Link from 'next/link';
import { useEffect } from 'react';
import { nextAuthOptions } from '../api/auth/[...nextauth]';
import Redis from 'ioredis';

export default function Rdr(props: any) {
    const handler = () => {
        const newUrl = document.getElementsByClassName(
            'redirect_url'
        )[0] as HTMLAnchorElement;
        window.location.href = newUrl.href;
    };

    useEffect(() => {
        setTimeout(() => {
            handler();
        }, 500);

    }, []);

    return (
        <>
            <Head>
                <title>Create Next App</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <meta
                    name="viewport"
                    content="width=device-width, initial-scale=1"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <h1>Redirect page</h1>
            <main>
                <div>
                    <p>HELLO</p>
                </div>

                <Link
                    href={{
                        pathname: `/report/error/${props.errorCode}`,
                    }}
                    className="redirect_url"
                    target="_blank"
                >
                    You are going to jump...
                </Link>
            </main>
        </>
    );
}

export const getServerSideProps: GetServerSideProps = async (ctx) => {
    const errorCode = ctx.query.errorCode || 'E0001';
    const redis = new Redis(6379, 'redis');

    const session = await getServerSession(ctx.req, ctx.res, nextAuthOptions);
    if (!session || !session.user) {
        return {
            redirect: {
                permanent: false,
                destination: '/error/403',
            },
            props: {},
        };
    }
    const userData = await redis.hgetall(session.user.userId);
    redis.disconnect();

    // are you ADMIN?
    if (
        userData.userRole === 'ADMIN' &&
        userData.adminSecretToken === process.env.ADMIN_SECRET_TOKEN
    ) {
        return { props: { errorCode: errorCode } };
    }

    // are you USER?
    if (userData.userRole === 'USER' && Object.keys(userData).length === 3) {
        return {
            redirect: {
                permanent: false,
                destination: '/error/403',
            },
            props: {},
        };
    } else {
        return { props: { errorCode: errorCode } };
    }

    // default: 403 error
    return {
        redirect: {
            permanent: false,
            destination: '/error/403',
        },
        props: {},
    };
};
